"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { useToast } from "@/hooks/use-toast"
import { FileText, Download, Mail, Loader2 } from "lucide-react"

interface ReportData {
  userInfo: {
    name: string
    email: string
    unitNumber?: string
    reportDate: string
  }
  energyAnalysis: {
    dieselUsage: {
      dailyConsumption: number
      monthlyCost: number
      annualCost: number
    }
    applianceLoad: {
      totalDailyLoad: number
      topConsumers: Array<{ name: string; consumption: number }>
    }
    sustainabilityScore: number
  }
  aiInsights: {
    summary: string
    recommendations: string[]
    solarRecommendation: {
      systemSize: number
      estimatedSavings: number
      paybackPeriod: number
    }
  }
  trends: {
    monthlyUsage: number[]
    costSavings: number
    efficiencyImprovement: number
  }
}

export function PDFReportGenerator({ reportData }: { reportData: ReportData }) {
  const [generating, setGenerating] = useState(false)
  const { toast } = useToast()

  const generateBrandedPDF = async () => {
    setGenerating(true)

    try {
      // Simulate PDF generation with branding
      await new Promise((resolve) => setTimeout(resolve, 3000))

      // TODO: Implement actual PDF generation with jsPDF
      const pdfContent = generatePDFContent(reportData)

      // Create blob and download
      const blob = new Blob([pdfContent], { type: "application/pdf" })
      const url = URL.createObjectURL(blob)
      const link = document.createElement("a")
      link.href = url
      link.download = `Enerlyst_Energy_Report_${reportData.userInfo.name.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.pdf`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

      toast({
        title: "Report Generated!",
        description: "Your branded energy report has been downloaded.",
      })
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate PDF report. Please try again.",
        variant: "destructive",
      })
    } finally {
      setGenerating(false)
    }
  }

  const emailReport = async () => {
    setGenerating(true)

    try {
      // Generate PDF first
      const pdfContent = generatePDFContent(reportData)

      // TODO: Send email with PDF attachment
      await new Promise((resolve) => setTimeout(resolve, 2000))

      toast({
        title: "Report Emailed!",
        description: `Energy report sent to ${reportData.userInfo.email}`,
      })
    } catch (error) {
      toast({
        title: "Email Failed",
        description: "Failed to send email. Please try again.",
        variant: "destructive",
      })
    } finally {
      setGenerating(false)
    }
  }

  const generatePDFContent = (data: ReportData): string => {
    // This would be replaced with actual jsPDF implementation
    return `
      ENERLYST ENERGY REPORT
      ======================
      
      [ENERLYST LOGO]
      
      Prepared for: ${data.userInfo.name}
      Email: ${data.userInfo.email}
      ${data.userInfo.unitNumber ? `Unit: ${data.userInfo.unitNumber}` : ""}
      Report Date: ${data.userInfo.reportDate}
      
      EXECUTIVE SUMMARY
      =================
      ${data.aiInsights.summary}
      
      ENERGY ANALYSIS
      ===============
      Diesel Usage:
      - Daily Consumption: ${data.energyAnalysis.dieselUsage.dailyConsumption}L
      - Monthly Cost: ₦${data.energyAnalysis.dieselUsage.monthlyCost.toLocaleString()}
      - Annual Cost: ₦${data.energyAnalysis.dieselUsage.annualCost.toLocaleString()}
      
      Appliance Load:
      - Total Daily Load: ${data.energyAnalysis.applianceLoad.totalDailyLoad} kWh
      - Top Consumers: ${data.energyAnalysis.applianceLoad.topConsumers.map((c) => c.name).join(", ")}
      
      Sustainability Score: ${data.energyAnalysis.sustainabilityScore}/100
      
      AI RECOMMENDATIONS
      ==================
      ${data.aiInsights.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join("\n")}
      
      SOLAR RECOMMENDATION
      ====================
      - Recommended System Size: ${data.aiInsights.solarRecommendation.systemSize} kW
      - Estimated Annual Savings: ₦${data.aiInsights.solarRecommendation.estimatedSavings.toLocaleString()}
      - Payback Period: ${data.aiInsights.solarRecommendation.paybackPeriod} years
      
      TRENDS & INSIGHTS
      =================
      - Cost Savings This Month: ₦${data.trends.costSavings.toLocaleString()}
      - Efficiency Improvement: ${data.trends.efficiencyImprovement}%
      
      ---
      Report generated by Enerlyst AI
      Pelagus Real Estate and Energy Solutions
      Founded by Joel Nkemjieme
      
      For more information, visit: www.enerlyst.com
      Contact: info@pelagusrealestate.com
    `
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5 text-[#22C55E]" />
          Generate Branded Report
        </CardTitle>
        <CardDescription>Create a comprehensive PDF report with Enerlyst branding and AI insights</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="p-4 bg-muted/50 rounded-lg">
          <h4 className="font-medium mb-2">Report Preview</h4>
          <ul className="text-sm text-muted-foreground space-y-1">
            <li>• Enerlyst logo and professional branding</li>
            <li>• Comprehensive energy analysis</li>
            <li>• AI-powered insights and recommendations</li>
            <li>• Solar system recommendations</li>
            <li>• Usage trends and cost savings</li>
            <li>• Company information and contact details</li>
          </ul>
        </div>

        <div className="flex gap-2">
          <Button onClick={generateBrandedPDF} disabled={generating} className="flex-1 bg-[#22C55E] hover:bg-[#16A34A]">
            {generating ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : <Download className="h-4 w-4 mr-2" />}
            Download PDF
          </Button>

          <Button onClick={emailReport} disabled={generating} variant="outline" className="flex-1 bg-transparent">
            {generating ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : <Mail className="h-4 w-4 mr-2" />}
            Email Report
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
